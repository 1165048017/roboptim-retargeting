
// This file has been generated by the metapod robotbuilder library.

#ifdef _MSC_VER
# pragma warning( push )
// The following warnings are only needed if the FloatType is float, because
// the code generator uses double anyway.
// disable warning C4305 truncation from 'double' to 'float'
// disable warning C4244 conversion from 'double' to 'float', possible loss of data
# pragma warning( disable: 4305 4244)
#endif

#include "hrp4g2.hh"

namespace metapod {

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node0::joint_name = std::string("world_joint");
template <> const std::string hrp4g2<FloatType>::Node0::body_name = std::string("base_link");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node0::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node0::Node0():
  joint() {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node1::joint_name = std::string("CHEST_P");
template <> const std::string hrp4g2<FloatType>::Node1::body_name = std::string("CHEST_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node1::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.01, 0, 0.209));
template <> hrp4g2<FloatType>::Node1::Node1():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node2::joint_name = std::string("CHEST_R");
template <> const std::string hrp4g2<FloatType>::Node2::body_name = std::string("CHEST_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node2::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node2::Node2():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node3::joint_name = std::string("CHEST_Y");
template <> const std::string hrp4g2<FloatType>::Node3::body_name = std::string("CHEST_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node3::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node3::Node3():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node4::joint_name = std::string("L_SHOULDER_P");
template <> const std::string hrp4g2<FloatType>::Node4::body_name = std::string("L_SHOULDER_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node4::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.04, 0.16, 0.285));
template <> hrp4g2<FloatType>::Node4::Node4():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node5::joint_name = std::string("L_SHOULDER_R");
template <> const std::string hrp4g2<FloatType>::Node5::body_name = std::string("L_SHOULDER_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node5::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node5::Node5():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node6::joint_name = std::string("L_SHOULDER_Y");
template <> const std::string hrp4g2<FloatType>::Node6::body_name = std::string("L_SHOULDER_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node6::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node6::Node6():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node7::joint_name = std::string("L_ELBOW_P");
template <> const std::string hrp4g2<FloatType>::Node7::body_name = std::string("L_ELBOW_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node7::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.283));
template <> hrp4g2<FloatType>::Node7::Node7():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node8::joint_name = std::string("L_WRIST_Y");
template <> const std::string hrp4g2<FloatType>::Node8::body_name = std::string("L_WRIST_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixTpl<FloatType> > hrp4g2<FloatType>::Node8::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixTpl<FloatType> >(
    matrix3dMaker<FloatType>(1, 0, 0, 0, 0.984808, 0.173648, 0, -0.173648, 0.984808),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node8::Node8():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node9::joint_name = std::string("L_WRIST_R");
template <> const std::string hrp4g2<FloatType>::Node9::body_name = std::string("L_WRIST_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node9::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.222445));
template <> hrp4g2<FloatType>::Node9::Node9():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node10::joint_name = std::string("L_HAND_J0");
template <> const std::string hrp4g2<FloatType>::Node10::body_name = std::string("L_HAND_J0_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node10::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.025, -0.0046, -0.0526));
template <> hrp4g2<FloatType>::Node10::Node10():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node11::joint_name = std::string("L_HAND_J1");
template <> const std::string hrp4g2<FloatType>::Node11::body_name = std::string("L_HAND_J1_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node11::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.009, 0, -0.0959));
template <> hrp4g2<FloatType>::Node11::Node11():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node12::joint_name = std::string("NECK_Y");
template <> const std::string hrp4g2<FloatType>::Node12::body_name = std::string("NECK_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node12::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.04, 0, 0.434));
template <> hrp4g2<FloatType>::Node12::Node12():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node13::joint_name = std::string("NECK_R");
template <> const std::string hrp4g2<FloatType>::Node13::body_name = std::string("NECK_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node13::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node13::Node13():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node14::joint_name = std::string("NECK_P");
template <> const std::string hrp4g2<FloatType>::Node14::body_name = std::string("NECK_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node14::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node14::Node14():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node15::joint_name = std::string("EYEBROW_P");
template <> const std::string hrp4g2<FloatType>::Node15::body_name = std::string("EYEBROW_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node15::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.036, 0, 0.09));
template <> hrp4g2<FloatType>::Node15::Node15():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node16::joint_name = std::string("EYELID_P");
template <> const std::string hrp4g2<FloatType>::Node16::body_name = std::string("EYELID_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node16::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.082, 0.0315, 0.0596));
template <> hrp4g2<FloatType>::Node16::Node16():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node17::joint_name = std::string("EYE_P");
template <> const std::string hrp4g2<FloatType>::Node17::body_name = std::string("EYE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node17::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.081618, 0.0315, 0.059615));
template <> hrp4g2<FloatType>::Node17::Node17():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node18::joint_name = std::string("EYE_Y");
template <> const std::string hrp4g2<FloatType>::Node18::body_name = std::string("EYE_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node18::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node18::Node18():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node19::joint_name = std::string("MOUTH_P");
template <> const std::string hrp4g2<FloatType>::Node19::body_name = std::string("MOUTH_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node19::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.038928, 0, 0.005078));
template <> hrp4g2<FloatType>::Node19::Node19():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node20::joint_name = std::string("CHEEK_P");
template <> const std::string hrp4g2<FloatType>::Node20::body_name = std::string("CHEEK_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node20::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.026516, 0, 0.025576));
template <> hrp4g2<FloatType>::Node20::Node20():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node21::joint_name = std::string("LOWERLIP_P");
template <> const std::string hrp4g2<FloatType>::Node21::body_name = std::string("LOWERLIP_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node21::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.057358, 0, -0.027457));
template <> hrp4g2<FloatType>::Node21::Node21():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node22::joint_name = std::string("UPPERLIP_P");
template <> const std::string hrp4g2<FloatType>::Node22::body_name = std::string("UPPERLIP_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node22::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.102, 0, 0.012));
template <> hrp4g2<FloatType>::Node22::Node22():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node23::joint_name = std::string("R_SHOULDER_P");
template <> const std::string hrp4g2<FloatType>::Node23::body_name = std::string("R_SHOULDER_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node23::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.04, -0.16, 0.285));
template <> hrp4g2<FloatType>::Node23::Node23():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node24::joint_name = std::string("R_SHOULDER_R");
template <> const std::string hrp4g2<FloatType>::Node24::body_name = std::string("R_SHOULDER_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node24::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node24::Node24():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node25::joint_name = std::string("R_SHOULDER_Y");
template <> const std::string hrp4g2<FloatType>::Node25::body_name = std::string("R_SHOULDER_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node25::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node25::Node25():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node26::joint_name = std::string("R_ELBOW_P");
template <> const std::string hrp4g2<FloatType>::Node26::body_name = std::string("R_ELBOW_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node26::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.283));
template <> hrp4g2<FloatType>::Node26::Node26():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node27::joint_name = std::string("R_WRIST_Y");
template <> const std::string hrp4g2<FloatType>::Node27::body_name = std::string("R_WRIST_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixTpl<FloatType> > hrp4g2<FloatType>::Node27::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixTpl<FloatType> >(
    matrix3dMaker<FloatType>(1, 0, 0, 0, 0.984808, -0.173648, 0, 0.173648, 0.984808),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node27::Node27():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node28::joint_name = std::string("R_WRIST_R");
template <> const std::string hrp4g2<FloatType>::Node28::body_name = std::string("R_WRIST_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node28::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.222445));
template <> hrp4g2<FloatType>::Node28::Node28():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node29::joint_name = std::string("R_HAND_J0");
template <> const std::string hrp4g2<FloatType>::Node29::body_name = std::string("R_HAND_J0_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node29::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.025, -0.0046, -0.0526));
template <> hrp4g2<FloatType>::Node29::Node29():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node30::joint_name = std::string("R_HAND_J1");
template <> const std::string hrp4g2<FloatType>::Node30::body_name = std::string("R_HAND_J1_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node30::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(-0.009, 0, -0.0959));
template <> hrp4g2<FloatType>::Node30::Node30():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node31::joint_name = std::string("L_HIP_Y");
template <> const std::string hrp4g2<FloatType>::Node31::body_name = std::string("L_HIP_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node31::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.0875, 0));
template <> hrp4g2<FloatType>::Node31::Node31():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node32::joint_name = std::string("L_HIP_R");
template <> const std::string hrp4g2<FloatType>::Node32::body_name = std::string("L_HIP_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node32::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node32::Node32():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node33::joint_name = std::string("L_HIP_P");
template <> const std::string hrp4g2<FloatType>::Node33::body_name = std::string("L_HIP_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node33::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node33::Node33():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node34::joint_name = std::string("L_KNEE_P");
template <> const std::string hrp4g2<FloatType>::Node34::body_name = std::string("L_KNEE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node34::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.01905, -0.358));
template <> hrp4g2<FloatType>::Node34::Node34():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node35::joint_name = std::string("L_ANKLE_P");
template <> const std::string hrp4g2<FloatType>::Node35::body_name = std::string("L_ANKLE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node35::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.341151));
template <> hrp4g2<FloatType>::Node35::Node35():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node36::joint_name = std::string("L_ANKLE_R");
template <> const std::string hrp4g2<FloatType>::Node36::body_name = std::string("L_ANKLE_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node36::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node36::Node36():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node37::joint_name = std::string("L_TOE_P");
template <> const std::string hrp4g2<FloatType>::Node37::body_name = std::string("L_TOE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node37::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.115, 0, -0.077));
template <> hrp4g2<FloatType>::Node37::Node37():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node38::joint_name = std::string("R_HIP_Y");
template <> const std::string hrp4g2<FloatType>::Node38::body_name = std::string("R_HIP_Y_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node38::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, -0.0875, 0));
template <> hrp4g2<FloatType>::Node38::Node38():
  joint(0, 0, 1) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node39::joint_name = std::string("R_HIP_R");
template <> const std::string hrp4g2<FloatType>::Node39::body_name = std::string("R_HIP_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node39::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node39::Node39():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node40::joint_name = std::string("R_HIP_P");
template <> const std::string hrp4g2<FloatType>::Node40::body_name = std::string("R_HIP_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node40::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node40::Node40():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node41::joint_name = std::string("R_KNEE_P");
template <> const std::string hrp4g2<FloatType>::Node41::body_name = std::string("R_KNEE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node41::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0.01905, -0.358));
template <> hrp4g2<FloatType>::Node41::Node41():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node42::joint_name = std::string("R_ANKLE_P");
template <> const std::string hrp4g2<FloatType>::Node42::body_name = std::string("R_ANKLE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node42::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, -0.341151));
template <> hrp4g2<FloatType>::Node42::Node42():
  joint(0, 1, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node43::joint_name = std::string("R_ANKLE_R");
template <> const std::string hrp4g2<FloatType>::Node43::body_name = std::string("R_ANKLE_R_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node43::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0, 0, 0));
template <> hrp4g2<FloatType>::Node43::Node43():
  joint(1, 0, 0) {}

typedef double FloatType;
template <> const std::string hrp4g2<FloatType>::Node44::joint_name = std::string("R_TOE_P");
template <> const std::string hrp4g2<FloatType>::Node44::body_name = std::string("R_TOE_P_LINK");
template <> const Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> > hrp4g2<FloatType>::Node44::Xt = Spatial::TransformT<FloatType, Spatial::RotationMatrixIdentityTpl<FloatType> >(
    Spatial::RotationMatrixIdentityTpl<FloatType>(),
    Vector3dTpl<FloatType>::Type(0.115, 0, -0.077));
template <> hrp4g2<FloatType>::Node44::Node44():
  joint(0, 1, 0) {}



template <> Spatial::InertiaTpl<FloatType> hrp4g2<FloatType>::inertias[] = {
    spatialInertiaMaker<FloatType>(
        9.63978,
        Vector3dTpl<FloatType>::Type(-0.0352531, -0.00220273, 0.159198),
        matrix3dMaker<FloatType>(0.0918687, -0.00034285, 0.00464341, -0.00034285, 0.0421667, -0.00033899, 0.00464341, -0.00033899, 0.0934156)),
    spatialInertiaMaker<FloatType>(
        0.615221,
        Vector3dTpl<FloatType>::Type(-0.00431692, 0.00295121, -0.00052352),
        matrix3dMaker<FloatType>(0.00048881, -1.586e-05, -6.8e-07, -1.586e-05, 0.00031347, 2.51e-06, -6.8e-07, 2.51e-06, 0.0006496)),
    spatialInertiaMaker<FloatType>(
        1.18272,
        Vector3dTpl<FloatType>::Type(-0.0166766, -0.00299998, 0.0499313),
        matrix3dMaker<FloatType>(0.00157812, -2.9e-07, -0.00050581, -2.9e-07, 0.00240882, 0, -0.00050581, 0, 0.00155861)),
    spatialInertiaMaker<FloatType>(
        6.99925,
        Vector3dTpl<FloatType>::Type(-0.0271791, -0.00615907, 0.204679),
        matrix3dMaker<FloatType>(0.0661556, -9.895e-05, 0.00618429, -9.895e-05, 0.0537304, -0.00042091, 0.00618429, -0.00042091, 0.0381181)),
    spatialInertiaMaker<FloatType>(
        0.416314,
        Vector3dTpl<FloatType>::Type(0.00162613, 0.0322711, 0.00032585),
        matrix3dMaker<FloatType>(0.00036778, 0, -5.9e-07, 0, 0.00013777, -3.06e-06, -5.9e-07, -3.06e-06, 0.00037096)),
    spatialInertiaMaker<FloatType>(
        0.582341,
        Vector3dTpl<FloatType>::Type(0.00306386, -0.00468295, -0.0438792),
        matrix3dMaker<FloatType>(0.00063049, -3.41e-06, -6.927e-05, -3.41e-06, 0.00069086, -2.74e-06, -6.927e-05, -2.74e-06, 0.00021203)),
    spatialInertiaMaker<FloatType>(
        1.2171,
        Vector3dTpl<FloatType>::Type(-0.00133297, -0.0049273, -0.175796),
        matrix3dMaker<FloatType>(0.00633269, 4.68e-06, -0.00010445, 4.68e-06, 0.00634443, -0.00023327, -0.00010445, -0.00023327, 0.00063318)),
    spatialInertiaMaker<FloatType>(
        0.346304,
        Vector3dTpl<FloatType>::Type(-0.00201792, 0.00857284, -0.0651161),
        matrix3dMaker<FloatType>(0.00103903, 1.97e-06, -1.076e-05, 1.97e-06, 0.00103903, 0.00015919, -1.076e-05, 0.00015919, 0.00011342)),
    spatialInertiaMaker<FloatType>(
        0.266253,
        Vector3dTpl<FloatType>::Type(-0.00746639, -0.0029953, -0.187222),
        matrix3dMaker<FloatType>(0.00016335, 4e-08, 1.331e-05, 4e-08, 0.00019982, 1.6e-07, 1.331e-05, 1.6e-07, 6.833e-05)),
    spatialInertiaMaker<FloatType>(
        0.0134204,
        Vector3dTpl<FloatType>::Type(0.0039155, -0.00299997, -0.0027439),
        matrix3dMaker<FloatType>(6.5e-07, 0, 1.9e-07, 0, 1.01e-06, 0, 1.9e-07, 0, 6.7e-07)),
    spatialInertiaMaker<FloatType>(
        0.0894,
        Vector3dTpl<FloatType>::Type(-0.033, -0.003, -0.02),
        matrix3dMaker<FloatType>(3.576e-05, 0, -5.9e-05, 0, 0.00013312, 0, -5.9e-05, 0, 9.736e-05)),
    spatialInertiaMaker<FloatType>(
        0.3576,
        Vector3dTpl<FloatType>::Type(-0.017, -0.003, -0.062),
        matrix3dMaker<FloatType>(0.00137461, 0, -0.00037691, 0, 0.00147796, 0, -0.00037691, 0, 0.00010335)),
    spatialInertiaMaker<FloatType>(
        0.339107,
        Vector3dTpl<FloatType>::Type(-0.00096033, 0.00455251, -0.0459711),
        matrix3dMaker<FloatType>(0.00017816, 5.06e-06, -5.63e-06, 5.06e-06, 0.00018286, -1.05e-06, -5.63e-06, -1.05e-06, 0.00017778)),
    spatialInertiaMaker<FloatType>(
        0.248472,
        Vector3dTpl<FloatType>::Type(-0.00874639, -0.00033895, -9.1e-07),
        matrix3dMaker<FloatType>(4.275e-05, 5.79e-06, 0, 5.79e-06, 9.459e-05, 1e-08, 0, 1e-08, 0.00010951)),
    spatialInertiaMaker<FloatType>(
        0.0201469,
        Vector3dTpl<FloatType>::Type(-0.00165369, -0.00887094, 0.0161224),
        matrix3dMaker<FloatType>(7.45e-06, 1.2e-07, 2.5e-07, 1.2e-07, 3.96e-06, -1.33e-06, 2.5e-07, -1.33e-06, 4.76e-06)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.108, -0.003, 0.009),
        matrix3dMaker<FloatType>(3.025e-05, 0, -0.00036304, 0, 0.00438676, 0, -0.00036304, 0, 0.0043565)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.012, -0.003, -0.021),
        matrix3dMaker<FloatType>(0.00016471, 0, 9.412e-05, 0, 0.0002185, 0, 9.412e-05, 0, 5.378e-05)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.021, -0.003, 0),
        matrix3dMaker<FloatType>(0, 0, 0, 0, 0.00016471, 0, 0, 0, 0.00016471)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.021, -0.003, 0),
        matrix3dMaker<FloatType>(0, 0, 0, 0, 0.00016471, 0, 0, 0, 0.00016471)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.057, -0.003, -0.027),
        matrix3dMaker<FloatType>(0.00027228, 0, 0.00057482, 0, 0.00148578, 0, 0.00057482, 0, 0.0012135)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.06, -0.003, 0.012),
        matrix3dMaker<FloatType>(5.378e-05, 0, -0.00026892, 0, 0.00139838, 0, -0.00026892, 0, 0.0013446)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.009, -0.003, 0.012),
        matrix3dMaker<FloatType>(5.378e-05, 0, -0.00040338, 0, 0.00307913, 0, -0.00040338, 0, 0.00302535)),
    spatialInertiaMaker<FloatType>(
        0.3735,
        Vector3dTpl<FloatType>::Type(0.009, -0.003, -0.012),
        matrix3dMaker<FloatType>(5.378e-05, 0, 4.034e-05, 0, 8.404e-05, 0, 4.034e-05, 0, 3.025e-05)),
    spatialInertiaMaker<FloatType>(
        0.416314,
        Vector3dTpl<FloatType>::Type(0.00162613, 0.0322711, 0.00032585),
        matrix3dMaker<FloatType>(0.00036778, 0, -5.9e-07, 0, 0.00013777, -3.06e-06, -5.9e-07, -3.06e-06, 0.00037096)),
    spatialInertiaMaker<FloatType>(
        0.582341,
        Vector3dTpl<FloatType>::Type(0.00306386, -0.00468295, -0.0438792),
        matrix3dMaker<FloatType>(0.00063049, -3.41e-06, -6.927e-05, -3.41e-06, 0.00069086, -2.74e-06, -6.927e-05, -2.74e-06, 0.00021203)),
    spatialInertiaMaker<FloatType>(
        1.2171,
        Vector3dTpl<FloatType>::Type(-0.00133297, -0.0049273, -0.175796),
        matrix3dMaker<FloatType>(0.00633269, 4.68e-06, -0.00010445, 4.68e-06, 0.00634443, -0.00023327, -0.00010445, -0.00023327, 0.00063318)),
    spatialInertiaMaker<FloatType>(
        0.339751,
        Vector3dTpl<FloatType>::Type(-0.00193431, -0.013183, -0.0650965),
        matrix3dMaker<FloatType>(0.0010305, -2.02e-06, -9.96e-06, -2.02e-06, 0.00101811, -0.0001888, -9.96e-06, -0.0001888, 0.00012333)),
    spatialInertiaMaker<FloatType>(
        0.267153,
        Vector3dTpl<FloatType>::Type(-0.00746639, -0.0029953, -0.187222),
        matrix3dMaker<FloatType>(0.0001639, 4e-08, 1.335e-05, 4e-08, 0.0002005, 1.6e-07, 1.335e-05, 1.6e-07, 6.856e-05)),
    spatialInertiaMaker<FloatType>(
        0.0134204,
        Vector3dTpl<FloatType>::Type(0.0039155, -0.00299997, -0.0027439),
        matrix3dMaker<FloatType>(6.5e-07, 0, 1.9e-07, 0, 1.01e-06, 0, 1.9e-07, 0, 6.7e-07)),
    spatialInertiaMaker<FloatType>(
        0.0894,
        Vector3dTpl<FloatType>::Type(-0.033, -0.003, -0.02),
        matrix3dMaker<FloatType>(3.576e-05, 0, -5.9e-05, 0, 0.00013312, 0, -5.9e-05, 0, 9.736e-05)),
    spatialInertiaMaker<FloatType>(
        0.3576,
        Vector3dTpl<FloatType>::Type(-0.017, -0.003, -0.062),
        matrix3dMaker<FloatType>(0.00137461, 0, -0.00037691, 0, 0.00147796, 0, -0.00037691, 0, 0.00010335)),
    spatialInertiaMaker<FloatType>(
        1.38632,
        Vector3dTpl<FloatType>::Type(-0.0176579, -0.00300003, 0.0569882),
        matrix3dMaker<FloatType>(0.00209181, -3e-07, -0.00065475, -3e-07, 0.00315296, 0, -0.00065475, 0, 0.00187967)),
    spatialInertiaMaker<FloatType>(
        0.765863,
        Vector3dTpl<FloatType>::Type(-0.00225771, 2.784e-05, -0.00056834),
        matrix3dMaker<FloatType>(0.00062248, -5.24e-06, -2.35e-06, -5.24e-06, 0.00035339, 2.7e-06, -2.35e-06, 2.7e-06, 0.00077051)),
    spatialInertiaMaker<FloatType>(
        2.65699,
        Vector3dTpl<FloatType>::Type(0.00461936, 0.0122711, -0.202322),
        matrix3dMaker<FloatType>(0.0387719, -1.924e-05, 0.00107343, -1.924e-05, 0.037666, 0.00168167, 0.00107343, 0.00168167, 0.00284886)),
    spatialInertiaMaker<FloatType>(
        2.41801,
        Vector3dTpl<FloatType>::Type(-0.0139748, -0.00473877, -0.156753),
        matrix3dMaker<FloatType>(0.020583, 1.89e-06, -0.00138864, 1.89e-06, 0.0209234, -6.334e-05, -0.00138864, -6.334e-05, 0.00155253)),
    spatialInertiaMaker<FloatType>(
        0.285836,
        Vector3dTpl<FloatType>::Type(-0.00368911, -0.00315844, 0.00129883),
        matrix3dMaker<FloatType>(8.638e-05, -1.7e-07, -1.42e-06, -1.7e-07, 0.00016564, -7e-08, -1.42e-06, -7e-08, 0.00018476)),
    spatialInertiaMaker<FloatType>(
        1.66194,
        Vector3dTpl<FloatType>::Type(0.0284581, -0.00353093, -0.0558419),
        matrix3dMaker<FloatType>(0.00174832, 2.024e-05, 0.00056507, 2.024e-05, 0.00473241, -3.996e-05, 0.00056507, -3.996e-05, 0.00456133)),
    spatialInertiaMaker<FloatType>(
        0.218956,
        Vector3dTpl<FloatType>::Type(0.0192814, 0.00437684, -0.00358467),
        matrix3dMaker<FloatType>(0.00017248, 8.93e-06, 6.12e-06, 8.93e-06, 0.00010981, -2.9e-06, 6.12e-06, -2.9e-06, 0.00026251)),
    spatialInertiaMaker<FloatType>(
        1.38632,
        Vector3dTpl<FloatType>::Type(-0.0176579, -0.00300003, 0.0569882),
        matrix3dMaker<FloatType>(0.00209181, -3e-07, -0.00065475, -3e-07, 0.00315296, 0, -0.00065475, 0, 0.00187967)),
    spatialInertiaMaker<FloatType>(
        0.765863,
        Vector3dTpl<FloatType>::Type(-0.00225771, 2.784e-05, -0.00056834),
        matrix3dMaker<FloatType>(0.00062248, -5.24e-06, -2.35e-06, -5.24e-06, 0.00035339, 2.7e-06, -2.35e-06, 2.7e-06, 0.00077051)),
    spatialInertiaMaker<FloatType>(
        2.65699,
        Vector3dTpl<FloatType>::Type(0.00461936, 0.0122711, -0.202322),
        matrix3dMaker<FloatType>(0.0387719, -1.924e-05, 0.00107343, -1.924e-05, 0.037666, 0.00168167, 0.00107343, 0.00168167, 0.00284886)),
    spatialInertiaMaker<FloatType>(
        2.41801,
        Vector3dTpl<FloatType>::Type(-0.0139748, -0.00473877, -0.156753),
        matrix3dMaker<FloatType>(0.020583, 1.89e-06, -0.00138864, 1.89e-06, 0.0209234, -6.334e-05, -0.00138864, -6.334e-05, 0.00155253)),
    spatialInertiaMaker<FloatType>(
        0.285836,
        Vector3dTpl<FloatType>::Type(-0.00368911, -0.00315844, 0.00129883),
        matrix3dMaker<FloatType>(8.638e-05, -1.7e-07, -1.42e-06, -1.7e-07, 0.00016564, -7e-08, -1.42e-06, -7e-08, 0.00018476)),
    spatialInertiaMaker<FloatType>(
        1.66194,
        Vector3dTpl<FloatType>::Type(0.0284581, -0.00353093, -0.0558419),
        matrix3dMaker<FloatType>(0.00174832, 2.024e-05, 0.00056507, 2.024e-05, 0.00473241, -3.996e-05, 0.00056507, -3.996e-05, 0.00456133)),
    spatialInertiaMaker<FloatType>(
        0.218956,
        Vector3dTpl<FloatType>::Type(0.0192814, 0.00437684, -0.00358467),
        matrix3dMaker<FloatType>(0.00017248, 8.93e-06, 6.12e-06, 8.93e-06, 0.00010981, -2.9e-06, 6.12e-06, -2.9e-06, 0.00026251)),
};
}

#ifdef _MSC_VER
# pragma warning( pop )
#endif

